plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.10"
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version '1.0.3'
    id 'nu.studer.jooq' version '5.1.1'
    id 'org.flywaydb.flyway' version '7.0.4'
}

version "0.1"
group "pl.pollub.bsi"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime "netty"
    testRuntime "spock2"
    processing {
        incremental true
        annotations "pl.pollub.bsi.*"
    }
}

dependencies {

    //micronaut
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.sql:micronaut-jooq")
    annotationProcessor("io.micronaut:micronaut-inject-java")

    //postgresql
    implementation("org.postgresql:postgresql:42.2.12")

    //jooq
    compile('org.jooq:jooq:3.13.5')
    jooqGenerator("org.postgresql:postgresql:42.2.12")

    //postgres
    runtime("org.postgresql:postgresql:42.2.12")
    runtime("io.micronaut.sql:micronaut-jdbc-tomcat")
    implementation("io.micronaut.flyway:micronaut-flyway")

    //kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    //annotations
    implementation("javax.annotation:javax.annotation-api")

    //logback
    runtimeOnly("ch.qos.logback:logback-classic")

    //jackson
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.vavr:vavr:0.10.3")
    implementation("io.vavr:vavr-jackson:0.10.3")
    implementation("io.vavr:vavr-kotlin:0.10.2")


}

flyway {
    url = 'jdbc:postgresql://localhost:5432/passwallet'
    user = 'postgres'
    password = 'postgres'
    locations = ['classpath:databasemigrations']
}

mainClassName = "pl.pollub.bsi.ApplicationKt"
java {
    sourceCompatibility = JavaVersion.toVersion('13')
}

jooq {
    version = '3.13.4'  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/passwallet'
                    user = 'postgres'
                    password = 'postgres'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'nu.studer.sample'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '13'
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '13'
    }
}